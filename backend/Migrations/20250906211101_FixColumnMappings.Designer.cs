// <auto-generated />
using System;
using GestorEncuestas_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestorEncuestas_MVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250906211101_FixColumnMappings")]
    partial class FixColumnMappings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Encuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int")
                        .HasColumnName("autor");

                    b.Property<DateTime>("CierraEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("cierra_en");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descripcion");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Encuestas");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EncuestaId")
                        .HasColumnType("int")
                        .HasColumnName("encuesta_id");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("enunciado");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("obligatorio");

                    b.Property<string>("TipoPregunta")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_pregunta");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaId");

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.PreguntaOpcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Label");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("int")
                        .HasColumnName("pregunta_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaId");

                    b.ToTable("PreguntasOpciones");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Respuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EncuestaId")
                        .HasColumnType("int")
                        .HasColumnName("encuesta_id");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_respuesta");

                    b.Property<float?>("Numerica")
                        .HasColumnType("float")
                        .HasColumnName("respuesta_numeros");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("int")
                        .HasColumnName("pregunta_id");

                    b.Property<int?>("SeleccionOpcionId")
                        .HasColumnType("int")
                        .HasColumnName("seleccion_opcion_id");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("respuesta");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_respuesta");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaId");

                    b.HasIndex("PreguntaId");

                    b.HasIndex("SeleccionOpcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.RespuestaOpcion", b =>
                {
                    b.Property<int>("RespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("respuesta_id");

                    b.Property<int>("OpcionId")
                        .HasColumnType("int")
                        .HasColumnName("opcion");

                    b.HasKey("RespuestaId", "OpcionId");

                    b.HasIndex("OpcionId");

                    b.ToTable("RespuestasOpciones");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("DisplayRolNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rol");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("passwd");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rol");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RolId");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Encuesta", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Usuario", "Autor")
                        .WithMany("EncuestasCreadas")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Pregunta", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Encuesta", "Encuesta")
                        .WithMany("Preguntas")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.PreguntaOpcion", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Pregunta", "Pregunta")
                        .WithMany("Opciones")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Respuesta", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Encuesta", "Encuesta")
                        .WithMany("Respuestas")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorEncuestas_MVC.Models.Pregunta", "Pregunta")
                        .WithMany("Respuestas")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorEncuestas_MVC.Models.PreguntaOpcion", "SeleccionOpcion")
                        .WithMany("Respuestas")
                        .HasForeignKey("SeleccionOpcionId");

                    b.HasOne("GestorEncuestas_MVC.Models.Usuario", "Usuario")
                        .WithMany("Respuestas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encuesta");

                    b.Navigation("Pregunta");

                    b.Navigation("SeleccionOpcion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.RespuestaOpcion", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.PreguntaOpcion", "Opcion")
                        .WithMany("RespuestasOpciones")
                        .HasForeignKey("OpcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorEncuestas_MVC.Models.Respuesta", "Respuesta")
                        .WithMany("RespuestasOpciones")
                        .HasForeignKey("RespuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opcion");

                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Usuario", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorEncuestas_MVC.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GestorEncuestas_MVC.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Encuesta", b =>
                {
                    b.Navigation("Preguntas");

                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Pregunta", b =>
                {
                    b.Navigation("Opciones");

                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.PreguntaOpcion", b =>
                {
                    b.Navigation("Respuestas");

                    b.Navigation("RespuestasOpciones");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Respuesta", b =>
                {
                    b.Navigation("RespuestasOpciones");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("GestorEncuestas_MVC.Models.Usuario", b =>
                {
                    b.Navigation("EncuestasCreadas");

                    b.Navigation("Respuestas");
                });
#pragma warning restore 612, 618
        }
    }
}
